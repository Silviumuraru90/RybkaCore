include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

stages:
  - üíø build docker image
  - ‚úîÔ∏è‚ùå code checks
  - üî¨ unit testing
  - ‚ò¢Ô∏è functional testing
  - üóÇ binaries creation
  - üü™.üü™.üü© patch versioning
  - üéñbadges
  - üåê public

variables:
  DOCKER_IMG_TAG:
    value: "main"
    description: "'main' would be constant, but all jobs should be switched to 'dev_branch' tag via this var in case of debug / Dockerfile modif."
  GIT_STRATEGY: clone

default:
  image: registry.gitlab.com/silviu_space/rybka:${DOCKER_IMG_TAG}
  interruptible: true
#TODO: to be enabled here when docker image is well packaged with deps locally
  # tags:
  #   - rasp-pi

.local_runners:
  tags:
    - rasp-pi


###################################
#######  Templates Section  #######
###################################

.debug_template:
  script:
    - if [[ "$TRACE" ]]; then set -x; fi


#TODO to add a '|| $CI_COMMIT_BRANCH == "master"' reference once the 'master_shadow' branch updates are automatized
.dev_branches_and_master_shadow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "v.[0-9]+.[0-9]+.*" || $CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: always


###################################
#######     Jobs Section    #######
###################################

docker-build:
  image: docker:latest
  stage: üíø build docker image
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "${CI_REGISTRY_IMAGE}:${DOCKER_IMG_TAG}" .
    - docker push "${CI_REGISTRY_IMAGE}:${DOCKER_IMG_TAG}"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master_shadow" || $CI_COMMIT_BRANCH == "v.[0-9]+.[0-9]+.*" || $CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual

.code_checks:
  extends: .dev_branches_and_master_shadow
  stage: ‚úîÔ∏è‚ùå code checks
  needs: []
  script:
    - echo "(TO BE DONE) Code Checks"


###################################
#######     Unit Testing    #######
###################################

.testing_template:
  extends: 
    - .dev_branches_and_master_shadow
    - .local_runners
  stage: üî¨ unit testing
  script:
    - !reference [.debug_template, script]
    - echo "(TO BE DONE) Unit Tests"


###################################
#######  Functional Testing #######
###################################

#TODO: to be enabled here when docker image is well packaged with deps locally
.DEMO_rybka_run:
  extends: .testing_template
  stage: ‚ò¢Ô∏è functional testing
  needs: []
  script:
    - !reference [.debug_template, script]
    - sudo chmod +x rybkacore.py
    - ./rybkacore.py -m demo
  after_script:
    - ls -alH
  artifacts:
    paths:
      - archived_logs/*
      - DEMO/*
    when: always
  when: manual
  timeout: 30 m


###################################
#######  Scheduled Testing  #######
###################################

#TODO: to be enabled here when docker image is well packaged with deps locally
.DEMO_rybka_daily_24h_run:
  extends: .DEMO_rybka_run
  timeout: 1d
  rules:
    - if: '$DAILY_RUN && $CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - when: never


#TODO: to be enabled here when docker image is well packaged with deps locally
.DEMO_rybka_weekly_7d_run:
  extends: .DEMO_rybka_run
  timeout: 7d
  rules:
    - if: '$WEEKLY_RUN && $CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - when: never


###################################
#######  Binaries Creation  #######
###################################

.linux_package:
  stage: üóÇ binaries creation
  script:
    - !reference [.debug_template, script]
    - echo "(TO BE DONE) Packaged module for Linux"

.win_binary:
  stage: üóÇ binaries creation
  script:
    - !reference [.debug_template, script]
    - echo "(TO BE DONE) Binary Creation for Windows"

.mac_binary:
  stage: üóÇ binaries creation
  script:
    - !reference [.debug_template, script]
    - echo "(TO BE DONE) Binary Creation for Mac"


##############################################
#######  Versioning and shadow branch  #######
##############################################

patch_versioning:
  stage: üü™.üü™.üü© patch versioning
  needs: []
  script:
    - !reference [.debug_template, script]
    - git config --global user.email silviumuraru90@gmail.com
    - git config --global user.name "RYBKACORE Software CI"
    - git clone https://gitlab.com/Silviu_space/rybka.git RYBKA
    - pushd RYBKA
    - git checkout master
    - project_version=$(head -n 1 project_version)
    - project_version=${project_version%-*}
    - patch_version=${project_version//*.}
    - patch_version=$((patch_version+1))
    - project_version=${project_version%.*}
    - project_version="${project_version}.${patch_version}-${RELEASE_LIFE_CYCLE}"
    - echo "$project_version" > project_version
    - git add project_version
    - git commit -m "[Versioning] Pushing a new patch version [${project_version}]"
    - git push -o ci.skip "https://git_bot:${GIT_BOT_TOKEN}@gitlab.com/Silviu_space/rybka.git/" master
    - popd
    - rm -rf RYBKA
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && "Pushing a new" =~ $CI_COMMIT_MESSAGE'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - when: never


##############################################
#######             Badges             #######
##############################################

lines_of_code_badge:
  stage: üéñbadges
  needs: []
  script:
    - !reference [.debug_template, script]
    - |
      total_lines_of_code=$(curl -Ss --request GET "https://api.codetabs.com/v1/loc/?gitlab=Silviu_space/rybka" | jq -r '.[8] | .linesOfCode')
    - anybadge -l CodeLines -v $total_lines_of_code -f lines_of_code.svg -c green
    - echo "Lines of code count is [${total_lines_of_code}]"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - when: never
  artifacts:
    paths:
      - lines_of_code.svg
    when: always
    expire_in: never


##############################################
#######             Public             #######
##############################################

pages:
  stage: üåê public
  needs: []
  script:
    - echo "Updating Gitlab Pages"
  artifacts:
    expire_in: never
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - when: never
